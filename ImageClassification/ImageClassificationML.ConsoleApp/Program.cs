// This file was auto-generated by ML.NET Model Builder. 

using ImageClassificationML.Model;
using JsonParser;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using AnnouncementsModel;

namespace ImageClassificationML.ConsoleApp
{
    class Program
    {
        public static String AnnoucementsPath = @"C:\ML.NET\HouseData\Ogloszenia";
        public static List<Announcement> FindAnnouncements()
        {
            var paths = Directory.GetDirectories(AnnoucementsPath);
            var listOfAnnouncements = new List<Announcement>();
            foreach (var path in paths)
            {
                var files = Directory.GetFiles(path);
                var jsonFile = files.FirstOrDefault(x => x.Contains(".json"));
                var jsonParser = new AnnouncementJsonParser();
                var announcement = jsonParser.JsonToObject(jsonFile);
                listOfAnnouncements.Add(announcement);
            }

            return listOfAnnouncements;
        }
        static void Main()
        {

            var listOfAnnouncements = FindAnnouncements();

            /*var myAnnouncement = listOfAnnouncements[2];

            Announcement[] tmpCandidates = new Announcement[listOfAnnouncements.Count];
            listOfAnnouncements.CopyTo(tmpCandidates);
            var candidates = tmpCandidates.ToList();
            candidates.Remove(myAnnouncement);

            candidates = candidates.Where(x => x.District == myAnnouncement.District && x.Area == myAnnouncement.Area && x.NumberOfRooms == myAnnouncement.NumberOfRooms).ToList();*/



            /*var files = Directory.GetFiles(@"C:\ML.NET\HouseData\Ogloszenia\02");
            var jsonFile = files.FirstOrDefault(x => x.Contains(".json"));

            var jsonParser = new AnnouncementJsonParser();*/
            var announcement = listOfAnnouncements.First();
            
            var total = announcement.ImageInfos.Count;
            var correct = 0;
            Console.WriteLine($"District: {announcement.District.ToString()}\n\n");
            foreach (var imageInfo in announcement.ImageInfos)
            {
                Stopwatch sw = new Stopwatch();
                ModelInput sampleData = new ModelInput()
                {
                    ImageSource = imageInfo.ImagePath,
                };

                sw.Start();
                var predictionResult = ConsumeModel.Predict(sampleData);
                sw.Stop();

                Console.WriteLine($"Elapsed time = {sw.Elapsed}");
                Console.WriteLine($"ImageSource: {Path.GetFileName(imageInfo.ImagePath)}");
                Console.WriteLine($"Expected Label value {imageInfo.RoomType}");
                Console.WriteLine($"Predicted Label value {predictionResult.Prediction} \nPredicted Label scores: [{String.Join(",", predictionResult.Score)}]\n\n\n");
                if (predictionResult.Prediction.Equals(imageInfo.RoomType)) correct++;
            }

            Console.WriteLine($"{correct}/{total} labels matching.");

            /*files = Directory.GetFiles(@"C:\ML.NET\HouseData\Ogloszenia\01");

            Boolean firstIteration = true;

            foreach (var file in files)
            {
                ModelInput sampleData = new ModelInput()
                {
                    ImageSource = file,
                };
                Stopwatch sw = new Stopwatch();
                // Make a single prediction on the sample data and print results
                sw.Start();
                var predictionResult = ConsumeModel.Predict(sampleData);
                sw.Stop();

                //Console.WriteLine("Using model to make single prediction -- Comparing actual Label with predicted Label from sample data...\n\n");
                if (firstIteration)
                {
                    Console.WriteLine("============================================================\n");
                    firstIteration = false;
                }
                Console.WriteLine($"ImageSource: {Path.GetFileName(file)}");
                Console.WriteLine($"Predicted Label value {predictionResult.Prediction} \nPredicted Label scores: [{String.Join(",", predictionResult.Score)}]");
                Console.WriteLine($"Elapsed time = {sw.Elapsed}");
                Console.WriteLine("\n============================================================\n");
                //Console.WriteLine("=============== End of process, hit any key to finish ===============");
                
            }*/
            Console.ReadKey();
            // Create single instance of sample data from first line of dataset for model input


        }
    }
}
